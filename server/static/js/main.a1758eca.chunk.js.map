{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["SERVER_URL","window","location","port","protocol","host","ResultNewView","newItemList","useState","nameFilter","setNameFilter","sortKey","setSortKey","sortDescFlg","setSortDescFlg","className","htmlFor","type","id","placeholder","value","onChange","e","currentTarget","onClick","temp","filter","record","name","includes","sort","a","b","price","reverse","createItemList","map","index","key","href","item_url","target","rel","src","image_url","width","height","alt","ResultUsedView","usedItemList","shopFilter","setShopFilter","shop_name","shop_item_id","ResultView","showMode","App","searchWord","setSearchWord","setNewItemList","setUsedItemList","setShowMode","loadIngFlg","setLoadingFlg","useEffect","fetch","then","res","json","body","readOnly","disabled","role","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+KAEMA,EAAsC,SAAzBC,OAAOC,SAASC,KAC/B,wBACAF,OAAOC,SAASE,SAAW,KAAOH,OAAOC,SAASG,KAsBhDC,EAED,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACYC,mBAAS,IADrB,mBACjBC,EADiB,KACLC,EADK,OAEMF,mBAAS,IAFf,mBAEjBG,EAFiB,KAERC,EAFQ,OAGcJ,oBAAS,GAHvB,mBAGjBK,EAHiB,KAGJC,EAHI,KAkExB,OAAQ,oCACN,yBAAKC,UAAU,mCACb,yBAAKA,UAAU,mBACb,8BACE,yBAAKA,UAAU,0BACb,2BAAOA,UAAU,wBAAwBC,QAAQ,cAAjD,wCACA,2BAAOC,KAAK,OAAOC,GAAG,aAAaH,UAAU,eAC3CI,YAAY,mGACZC,MAAOX,EAAYY,SArEJ,SAACC,GAC1BZ,EAAcY,EAAEC,cAAcH,cAyE9B,yBAAKL,UAAU,mCACb,yBAAKA,UAAU,mBACb,2BAAOA,UAAU,mEACf,+BACE,4BACE,wBAAIA,UAAU,cAAcS,QA5CX,WACX,uBAAZb,GACFC,EAAW,sBACXE,GAAe,IAEVD,EAGHD,EAAW,IAFXE,GAAe,KAnBH,uBAAZH,EACK,qBAEF,sBAASE,EAAc,SAAM,WAuD1B,wBAAIE,UAAU,cAAcS,QAhCV,WACZ,iBAAZb,GACFC,EAAW,gBACXE,GAAe,IAEVD,EAGHD,EAAW,IAFXE,GAAe,KAzBH,iBAAZH,EACK,eAEF,gBAAQE,EAAc,SAAM,WAiDzB,wBAAIE,UAAU,eAAd,kBAGJ,+BAhFe,WACrB,IAAIU,EAAOlB,EACRmB,QAAO,SAAAC,GAAM,MAAmB,KAAflB,GAAoBkB,EAAOC,KAAKC,SAASpB,MAC7D,OAAOE,GACL,IAAK,qBACHc,EAAOA,EAAKK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEH,KAAOI,EAAEJ,KAAO,EAAIG,EAAEH,KAAOI,EAAEJ,MAAQ,EAAI,KACxE,MACF,IAAK,eACDH,EAAOA,EAAKK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,MAAQD,EAAEC,MAAQ,EAAIF,EAAEE,MAAQD,EAAEC,OAAS,EAAI,KAMlF,OAHIpB,IACFY,EAAOA,EAAKS,WAEPT,EAmEEU,GAAiBC,KAAI,SAACT,EAAQU,GAC3B,OACE,wBAAIC,IAAKD,GACP,wBAAItB,UAAU,gBAAe,uBAAGwB,KAAMZ,EAAOa,SAAUC,OAAO,SAASC,IAAI,uBAAuBf,EAAOC,OACzG,wBAAIb,UAAU,gBAAgBY,EAAOM,OACrC,wBAAIlB,UAAU,gBAAe,yBAAK4B,IAAKhB,EAAOiB,UAAWC,MArHtD,GAqH6EC,OArH7E,GAqHqGC,IAAKpB,EAAOC,kBAWlIoB,EAED,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EACWzC,mBAAS,IADpB,mBAClBC,EADkB,KACNC,EADM,OAEKF,mBAAS,IAFd,mBAElBG,EAFkB,KAETC,EAFS,OAGaJ,oBAAS,GAHtB,mBAGlBK,EAHkB,KAGLC,EAHK,OAIWN,mBAAS,IAJpB,mBAIlB0C,EAJkB,KAINC,EAJM,KAwE3B,OAAQ,oCACJ,yBAAKpC,UAAU,mCACb,yBAAKA,UAAU,mBACb,8BACE,yBAAKA,UAAU,0BACb,2BAAOA,UAAU,wBAAwBC,QAAQ,cAAjD,wCACA,2BAAOC,KAAK,OAAOC,GAAG,aAAaH,UAAU,eAC3CI,YAAY,mGACZC,MAAOX,EAAYY,SA1EJ,SAACC,GAC1BZ,EAAcY,EAAEC,cAAcH,WA2ExB,yBAAKL,UAAU,0BACb,2BAAOA,UAAU,wBAAwBC,QAAQ,cAAjD,sBACA,4BAAQD,UAAU,eAAeG,GAAG,aAAaE,MAAO8B,EAAY7B,SA1EzD,SAACC,GACpB6B,EAAc7B,EAAEC,cAAcH,SA0ElB,4BAAQA,MAAM,IAAd,wBACA,4BAAQA,MAAM,8CAAd,8CACA,4BAAQA,MAAM,yBAAd,yBACA,4BAAQA,MAAM,wCAAd,wCACA,4BAAQA,MAAM,4BAAd,iCAMZ,yBAAKL,UAAU,mCACb,yBAAKA,UAAU,mBACb,2BAAOA,UAAU,mEACf,+BACE,4BACE,wBAAIA,UAAU,cAAcS,QAtDX,WACX,uBAAZb,GACFC,EAAW,sBACXE,GAAe,IAEVD,EAGHD,EAAW,IAFXE,GAAe,KAnBH,uBAAZH,EACK,qBAEF,sBAASE,EAAc,SAAM,WAiE1B,wBAAIE,UAAU,cAAcS,QA1CV,WACZ,iBAAZb,GACFC,EAAW,gBACXE,GAAe,IAEVD,EAGHD,EAAW,IAFXE,GAAe,KAzBH,iBAAZH,EACK,eAEF,gBAAQE,EAAc,SAAM,WA2DzB,wBAAIE,UAAU,eAAd,sBACA,wBAAIA,UAAU,eAAd,4BACA,wBAAIA,UAAU,eAAd,kBAGJ,+BA7Fe,WACrB,IAAIU,EAAOwB,EACRvB,QAAO,SAAAC,GAAM,MAAmB,KAAflB,GAAoBkB,EAAOC,KAAKC,SAASpB,MAE7D,OADAgB,EAAOA,EAAKC,QAAO,SAAAC,GAAM,MAAmB,KAAfuB,GAAoBvB,EAAOyB,YAAcF,KAC/DvC,GACL,IAAK,qBACHc,EAAOA,EAAKK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEH,KAAOI,EAAEJ,KAAO,EAAIG,EAAEH,KAAOI,EAAEJ,MAAQ,EAAI,KACxE,MACF,IAAK,eACDH,EAAOA,EAAKK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,MAAQD,EAAEC,MAAQ,EAAIF,EAAEE,MAAQD,EAAEC,OAAS,EAAI,KAMlF,OAHIpB,IACFY,EAAOA,EAAKS,WAEPT,EA+EEU,GAAiBC,KAAI,SAACT,EAAQU,GAC7B,OACE,wBAAIC,IAAKD,GACP,wBAAItB,UAAU,gBAAe,uBAAGwB,KAAMZ,EAAOa,SAAUC,OAAO,SAASC,IAAI,uBAAuBf,EAAOC,OACzG,wBAAIb,UAAU,gBAAgBY,EAAOM,OACrC,wBAAIlB,UAAU,gBAAgBY,EAAOyB,WACrC,wBAAIrC,UAAU,gBAAgBY,EAAO0B,cACrC,wBAAItC,UAAU,gBAAe,yBAAK4B,IAAKhB,EAAOiB,UAAWC,MArPpD,GAqP2EC,OArP3E,GAqPmGC,IAAKpB,EAAOC,kBAWhI0B,EAID,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,SAAUhD,EAAgC,EAAhCA,YAAa0C,EAAmB,EAAnBA,aAC7B,OAAQM,GACN,IAAK,MACH,OAAQ,kBAAC,EAAD,CAAehD,YAAaA,IACtC,IAAK,OACH,OAAQ,kBAAC,EAAD,CAAgB0C,aAAcA,IACxC,QACE,OAAO,uCA2FEO,EAvFO,WAAO,IAAD,EACUhD,mBAAS,IADnB,mBACnBiD,EADmB,KACPC,EADO,OAEYlD,mBAAoB,IAFhC,mBAEnBD,EAFmB,KAENoD,EAFM,OAGcnD,mBAAqB,IAHnC,mBAGnByC,EAHmB,KAGLW,EAHK,OAIMpD,mBAAmB,OAJzB,mBAInB+C,EAJmB,KAITM,EAJS,OAKUrD,oBAAS,GALnB,mBAKnBsD,EALmB,KAKPC,EALO,KAqB1BC,qBAAU,WACJF,IACe,QAAbP,EACFU,MAAM,GAAD,OAAIjE,EAAJ,iCAAuCyD,EAAvC,oBAAoES,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAACG,GACrGV,EAAeU,GACfR,EAAY,OACZE,GAAc,MAGhBE,MAAM,GAAD,OAAIjE,EAAJ,kCAAwCyD,EAAxC,oBAAqES,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAACG,GACtGT,EAAgBS,GAChBR,EAAY,QACZE,GAAc,SAMlB,CAACD,IAQL,OACE,yBAAK/C,UAAU,aACb,yBAAKA,UAAU,mCACb,yBAAKA,UAAU,+BACb,6EAGJ,yBAAKA,UAAU,mCACb,yBAAKA,UAAU,mBACb,0BAAMA,UAAU,cACd,yBAAKA,UAAU,cACb,2BAAOC,QAAQ,cAAf,kCACA,2BAAOC,KAAK,OAAOF,UAAU,eAAeG,GAAG,aAAaC,YAAY,iCACtEC,MAAOqC,EAAYpC,SArDN,SAACC,GAC1BoC,EAAcpC,EAAEC,cAAcH,QAoD+BkD,SAAUR,KAE/D,yBAAK/C,UAAU,qBACb,2BAAOA,UAAU,mBAAmBC,QAAQ,YAA5C,4BACA,4BAAQD,UAAU,oBAAoBG,GAAG,WAAWE,MAAOmC,EAAUlC,SArDxD,SAACC,GACM,QAA1BA,EAAEC,cAAcH,OAClByC,EAAY,OACZF,EAAe,MAEfE,EAAY,QACZD,EAAgB,MAgDNW,SAAUT,GACV,4BAAQ1C,MAAM,OAAd,gBACA,4BAAQA,MAAM,QAAd,iBAEF,4BAAQH,KAAK,SAASF,UAAU,mCAC9BS,QA3BQ,WACpBuC,GAAc,IA0BsBQ,SA7Bc,KAAfd,GAAqBK,GA4B9C,oBAMR,yBAAK/C,UAAU,mCACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAS,sCAAiC+C,EAAa,GAAK,UAAYU,KAAK,UAChF,0BAAMzD,UAAU,WAAhB,iBAIN,kBAAC,EAAD,CAAYwC,SAAUA,EAAUhD,YAAaA,EAAa0C,aAAcA,MC3V1DwB,QACW,cAA7BxE,OAAOC,SAASwE,UAEe,UAA7BzE,OAAOC,SAASwE,UAEhBzE,OAAOC,SAASwE,SAASC,MACvB,2D,KCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,iB","file":"static/js/main.a1758eca.chunk.js","sourcesContent":["import React, { useState, FormEvent, useEffect } from 'react';\r\n\r\nconst SERVER_URL = window.location.port === '3000'\r\n  ? 'http://localhost:5000'\r\n  : window.location.protocol + '//' + window.location.host;\r\n\r\nconst THUMBNAIL_SIZE = 60;\r\n\r\ninterface NewItem {\r\n  price: number;\r\n  name: string;\r\n  item_url: string;\r\n  image_url: string;\r\n}\r\n\r\ninterface UsedItem {\r\n  price: number;\r\n  name: string;\r\n  item_url: string;\r\n  image_url: string;\r\n  shop_name: string;\r\n  shop_item_id: string;\r\n}\r\n\r\ntype ShowMode = 'New' | 'Used';\r\n\r\nconst ResultNewView: React.FC<{\r\n  newItemList: NewItem[]\r\n}> = ({ newItemList }) => {\r\n  const [nameFilter, setNameFilter] = useState('');\r\n  const [sortKey, setSortKey] = useState('');\r\n  const [sortDescFlg, setSortDescFlg] = useState(false);\r\n\r\n  const onChangeMameFilter = (e: FormEvent<HTMLInputElement>) => {\r\n    setNameFilter(e.currentTarget.value);\r\n  };\r\n\r\n  const createItemList = () => {\r\n    let temp = newItemList\r\n      .filter(record => nameFilter !== '' ? record.name.includes(nameFilter) : true);\r\n    switch(sortKey) {\r\n      case '商品名':\r\n        temp = temp.sort((a, b) => a.name > b.name ? 1 : a.name < b.name ? -1 : 0);\r\n        break;\r\n      case '価格':\r\n          temp = temp.sort((a, b) => a.price > b.price ? 1 : a.price < b.price ? -1 : 0);\r\n          break;\r\n    }\r\n    if (sortDescFlg) {\r\n      temp = temp.reverse();\r\n    }\r\n    return temp;\r\n  };\r\n\r\n  const itemNameLabel = () => {\r\n    if (sortKey !== '商品名') {\r\n      return '商品名';\r\n    }\r\n    return '商品名' + (sortDescFlg ? '↓' : '↑');\r\n  }\r\n\r\n  const itemPriceLabel = () => {\r\n    if (sortKey !== '価格') {\r\n      return '価格';\r\n    }\r\n    return '価格' + (sortDescFlg ? '↓' : '↑');\r\n  }\r\n\r\n  const onClickItemNameLabel = () => {\r\n    if (sortKey !== '商品名') { \r\n      setSortKey('商品名');\r\n      setSortDescFlg(false);\r\n    } else {\r\n      if (!sortDescFlg) {\r\n        setSortDescFlg(true);\r\n      } else {\r\n        setSortKey('');\r\n      }\r\n    }\r\n  };\r\n\r\n  const onClickItemPriceLabel = () => {\r\n    if (sortKey !== '価格') { \r\n      setSortKey('価格');\r\n      setSortDescFlg(false);\r\n    } else {\r\n      if (!sortDescFlg) {\r\n        setSortDescFlg(true);\r\n      } else {\r\n        setSortKey('');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (<>\r\n    <div className=\"row mt-3 justify-content-center\">\r\n      <div className=\"col-12 col-md-8\">\r\n        <form>\r\n          <div className=\"form-group d-flex my-0\">\r\n            <label className=\"text-nowrap mr-3 mt-2\" htmlFor=\"filterWord\">名前フィルタ</label>\r\n            <input type=\"text\" id=\"filterWord\" className=\"form-control\"\r\n              placeholder=\"入力したワードを含むもののみ表示\"\r\n              value={nameFilter} onChange={onChangeMameFilter} />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    <div className=\"row mt-3 justify-content-center\">\r\n      <div className=\"col-12 col-md-8\">\r\n        <table className=\"border table table-striped table-nowrap table-bordered table-sm\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"text-nowrap\" onClick={onClickItemNameLabel}>{itemNameLabel()}</th>\r\n              <th className=\"text-nowrap\" onClick={onClickItemPriceLabel}>{itemPriceLabel()}</th>\r\n              <th className=\"text-nowrap\">画像</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {createItemList().map((record, index) => {\r\n                return (\r\n                  <tr key={index}>\r\n                    <td className=\"align-middle\"><a href={record.item_url} target=\"_blank\" rel=\"noopener noreferrer\">{record.name}</a></td>\r\n                    <td className=\"align-middle\">{record.price}</td>\r\n                    <td className=\"align-middle\"><img src={record.image_url} width={THUMBNAIL_SIZE} height={THUMBNAIL_SIZE} alt={record.name} /></td>\r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </>);\r\n}\r\n\r\nconst ResultUsedView: React.FC<{\r\n  usedItemList: UsedItem[]\r\n}> = ({ usedItemList }) => {\r\n  const [nameFilter, setNameFilter] = useState('');\r\n  const [sortKey, setSortKey] = useState('');\r\n  const [sortDescFlg, setSortDescFlg] = useState(false);\r\n  const [shopFilter, setShopFilter] = useState('');\r\n\r\n  const onChangeMameFilter = (e: FormEvent<HTMLInputElement>) => {\r\n    setNameFilter(e.currentTarget.value);\r\n  };\r\n\r\n  const onChangeShop = (e: FormEvent<HTMLSelectElement>) => {\r\n    setShopFilter(e.currentTarget.value);\r\n  };\r\n\r\n  const createItemList = () => {\r\n    let temp = usedItemList\r\n      .filter(record => nameFilter !== '' ? record.name.includes(nameFilter) : true);\r\n    temp = temp.filter(record => shopFilter !== '' ? record.shop_name === shopFilter : true);\r\n    switch(sortKey) {\r\n      case '商品名':\r\n        temp = temp.sort((a, b) => a.name > b.name ? 1 : a.name < b.name ? -1 : 0);\r\n        break;\r\n      case '価格':\r\n          temp = temp.sort((a, b) => a.price > b.price ? 1 : a.price < b.price ? -1 : 0);\r\n          break;\r\n    }\r\n    if (sortDescFlg) {\r\n      temp = temp.reverse();\r\n    }\r\n    return temp;\r\n  };\r\n\r\n  const itemNameLabel = () => {\r\n    if (sortKey !== '商品名') {\r\n      return '商品名';\r\n    }\r\n    return '商品名' + (sortDescFlg ? '↓' : '↑');\r\n  }\r\n\r\n  const itemPriceLabel = () => {\r\n    if (sortKey !== '価格') {\r\n      return '価格';\r\n    }\r\n    return '価格' + (sortDescFlg ? '↓' : '↑');\r\n  }\r\n\r\n  const onClickItemNameLabel = () => {\r\n    if (sortKey !== '商品名') { \r\n      setSortKey('商品名');\r\n      setSortDescFlg(false);\r\n    } else {\r\n      if (!sortDescFlg) {\r\n        setSortDescFlg(true);\r\n      } else {\r\n        setSortKey('');\r\n      }\r\n    }\r\n  };\r\n\r\n  const onClickItemPriceLabel = () => {\r\n    if (sortKey !== '価格') { \r\n      setSortKey('価格');\r\n      setSortDescFlg(false);\r\n    } else {\r\n      if (!sortDescFlg) {\r\n        setSortDescFlg(true);\r\n      } else {\r\n        setSortKey('');\r\n      }\r\n    }\r\n  };\r\n\r\nreturn (<>\r\n    <div className=\"row mt-3 justify-content-center\">\r\n      <div className=\"col-12 col-md-8\">\r\n        <form>\r\n          <div className=\"form-group d-flex mt-0\">\r\n            <label className=\"text-nowrap mr-3 mt-2\" htmlFor=\"filterWord\">名前フィルタ</label>\r\n            <input type=\"text\" id=\"filterWord\" className=\"form-control\"\r\n              placeholder=\"入力したワードを含むもののみ表示\"\r\n              value={nameFilter} onChange={onChangeMameFilter} />\r\n          </div>\r\n          <div className=\"form-group d-flex mb-0\">\r\n            <label className=\"text-nowrap mr-3 mt-2\" htmlFor=\"filterShop\">販売店</label>\r\n            <select className=\"form-control\" id=\"filterShop\" value={shopFilter} onChange={onChangeShop}>\r\n                <option value=''>(未指定)</option>\r\n                <option value='大阪日本橋本店'>大阪日本橋本店</option>\r\n                <option value='梅田EST店'>梅田EST店</option>\r\n                <option value='名古屋大須店'>名古屋大須店</option>\r\n                <option value='秋葉原店'>秋葉原店</option>\r\n              </select>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    <div className=\"row mt-3 justify-content-center\">\r\n      <div className=\"col-12 col-md-8\">\r\n        <table className=\"border table table-striped table-nowrap table-bordered table-sm\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"text-nowrap\" onClick={onClickItemNameLabel}>{itemNameLabel()}</th>\r\n              <th className=\"text-nowrap\" onClick={onClickItemPriceLabel}>{itemPriceLabel()}</th>\r\n              <th className=\"text-nowrap\">販売店</th>\r\n              <th className=\"text-nowrap\">商品番号</th>\r\n              <th className=\"text-nowrap\">画像</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {createItemList().map((record, index) => {\r\n              return (\r\n                <tr key={index}>\r\n                  <td className=\"align-middle\"><a href={record.item_url} target=\"_blank\" rel=\"noopener noreferrer\">{record.name}</a></td>\r\n                  <td className=\"align-middle\">{record.price}</td>\r\n                  <td className=\"align-middle\">{record.shop_name}</td>\r\n                  <td className=\"align-middle\">{record.shop_item_id}</td>\r\n                  <td className=\"align-middle\"><img src={record.image_url} width={THUMBNAIL_SIZE} height={THUMBNAIL_SIZE} alt={record.name} /></td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </>);\r\n}\r\n\r\nconst ResultView: React.FC<{\r\n  showMode: ShowMode,\r\n  newItemList: NewItem[],\r\n  usedItemList: UsedItem[]\r\n}> = ({ showMode, newItemList, usedItemList }) => {\r\n  switch (showMode) {\r\n    case 'New':\r\n      return (<ResultNewView newItemList={newItemList} />);\r\n    case 'Used':\r\n      return (<ResultUsedView usedItemList={usedItemList} />);\r\n    default:\r\n      return <></>;\r\n  }\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  const [searchWord, setSearchWord] = useState('');\r\n  const [newItemList, setNewItemList] = useState<NewItem[]>([]);\r\n  const [usedItemList, setUsedItemList] = useState<UsedItem[]>([]);\r\n  const [showMode, setShowMode] = useState<ShowMode>('New');\r\n  const [loadIngFlg, setLoadingFlg] = useState(false);\r\n\r\n  const onChangeSearchWord = (e: FormEvent<HTMLInputElement>) => {\r\n    setSearchWord(e.currentTarget.value);\r\n  };\r\n\r\n  const onChangeShowMode = (e: FormEvent<HTMLSelectElement>) => {\r\n    if (e.currentTarget.value === 'New') {\r\n      setShowMode('New');\r\n      setNewItemList([]);\r\n    } else {\r\n      setShowMode('Used');\r\n      setUsedItemList([]);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (loadIngFlg) {\r\n      if (showMode === 'New') {\r\n        fetch(`${SERVER_URL}/search_new?item_name=${searchWord}&remove_keyword`).then(res => res.json()).then((body: NewItem[]) => {\r\n          setNewItemList(body);\r\n          setShowMode('New');\r\n          setLoadingFlg(false);\r\n        });\r\n      } else {\r\n        fetch(`${SERVER_URL}/search_used?item_name=${searchWord}&remove_keyword`).then(res => res.json()).then((body: UsedItem[]) => {\r\n          setUsedItemList(body);\r\n          setShowMode('Used');\r\n          setLoadingFlg(false);\r\n        });\r\n      }\r\n    }\r\n  }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    , [loadIngFlg]);\r\n\r\n  const isDisabledSearchButton = () => searchWord === '' || loadIngFlg;\r\n\r\n  const onClickSearch = () => {\r\n    setLoadingFlg(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row mt-3 justify-content-center\">\r\n        <div className=\"col-12 col-md-8 text-center\">\r\n          <h1>eイヤ検索アプリ</h1>\r\n        </div>\r\n      </div>\r\n      <div className=\"row mt-3 justify-content-center\">\r\n        <div className=\"col-12 col-md-8\">\r\n          <form className=\"border p-3\">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"searchWord\">検索ワード</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"searchWord\" placeholder=\"検索ワード\"\r\n                value={searchWord} onChange={onChangeSearchWord} readOnly={loadIngFlg}/>\r\n            </div>\r\n            <div className=\"form-group d-flex\">\r\n              <label className=\"text-nowrap mt-2\" htmlFor=\"showMode\">商品状態</label>\r\n              <select className=\"form-control ml-3\" id=\"showMode\" value={showMode} onChange={onChangeShowMode}\r\n                disabled={loadIngFlg}>\r\n                <option value='New'>新品</option>\r\n                <option value='Used'>中古</option>\r\n              </select>\r\n              <button type=\"button\" className=\"btn btn-primary text-nowrap ml-3\"\r\n                onClick={onClickSearch} disabled={isDisabledSearchButton()}>検索</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <div className=\"row mt-3 justify-content-center\">\r\n        <div className=\"col-12 col-md-8\">\r\n          <div className={`spinner-border text-primary ${loadIngFlg ? '' : 'd-none'}`} role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ResultView showMode={showMode} newItemList={newItemList} usedItemList={usedItemList} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\nimport * as serviceWorker from 'serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}